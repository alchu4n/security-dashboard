"use client"

import { useEffect, useRef } from "react"

export function VulnerabilityRiskMatrix() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas dimensions
    const setCanvasDimensions = () => {
      const parent = canvas.parentElement
      if (!parent) return

      canvas.width = parent.clientWidth
      canvas.height = 300
    }

    setCanvasDimensions()
    window.addEventListener("resize", setCanvasDimensions)

    // Sample data for the risk matrix
    const vulnerabilities = [
      { id: "V-001", impact: 4, likelihood: 5, count: 8, label: "未授权访问" },
      { id: "V-002", impact: 5, likelihood: 3, count: 12, label: "SQL注入" },
      { id: "V-003", impact: 3, likelihood: 4, count: 15, label: "XSS攻击" },
      { id: "V-004", impact: 2, likelihood: 5, count: 10, label: "配置错误" },
      { id: "V-005", impact: 5, likelihood: 2, count: 6, label: "权限提升" },
      { id: "V-006", impact: 1, likelihood: 3, count: 20, label: "信息泄露" },
      { id: "V-007", impact: 4, likelihood: 2, count: 9, label: "DDoS漏洞" },
      { id: "V-008", impact: 2, likelihood: 2, count: 14, label: "弱密码" },
      { id: "V-009", impact: 3, likelihood: 1, count: 7, label: "会话劫持" },
    ]

    // Draw risk matrix
    const drawRiskMatrix = () => {
      const padding = { top: 40, right: 20, bottom: 50, left: 50 }
      const chartWidth = canvas.width - padding.left - padding.right
      const chartHeight = canvas.height - padding.top - padding.bottom

      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Draw background
      ctx.fillStyle = "#ffffff"
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Draw grid
      const cellSize = Math.min(chartWidth / 5, chartHeight / 5)
      const gridWidth = cellSize * 5
      const gridHeight = cellSize * 5
      const gridX = padding.left + (chartWidth - gridWidth) / 2
      const gridY = padding.top

      // Draw grid cells with color gradient
      for (let i = 0; i < 5; i++) {
        for (let j = 0; j < 5; j++) {
          const x = gridX + j * cellSize
          const y = gridY + (4 - i) * cellSize // Invert y-axis to have (0,0) at bottom-left

          // Calculate risk level (1-25)
          const risk = (i + 1) * (j + 1)
          let color

          if (risk <= 4) {
            color = "#d1fae5" // Low risk - green
          } else if (risk <= 9) {
            color = "#bfdbfe" // Medium-low risk - blue
          } else if (risk <= 14) {
            color = "#fef3c7" // Medium risk - yellow
          } else if (risk <= 19) {
            color = "#fed7aa" // Medium-high risk - orange
          } else {
            color = "#fee2e2" // High risk - red
          }

          // Draw cell
          ctx.fillStyle = color
          ctx.fillRect(x, y, cellSize, cellSize)
          ctx.strokeStyle = "#e2e8f0"
          ctx.lineWidth = 1
          ctx.strokeRect(x, y, cellSize, cellSize)
        }
      }

      // Draw axis labels
      ctx.fillStyle = "#334155"
      ctx.font = "bold 12px sans-serif"
      ctx.textAlign = "center"
      ctx.textBaseline = "middle"

      // X-axis label
      ctx.fillText("可能性", gridX + gridWidth / 2, gridY + gridHeight + 30)

      // Y-axis label
      ctx.save()
      ctx.translate(gridX - 30, gridY + gridHeight / 2)
      ctx.rotate(-Math.PI / 2)
      ctx.fillText("影响", 0, 0)
      ctx.restore()

      // Draw axis values
      ctx.font = "12px sans-serif"

      // X-axis values
      for (let i = 0; i < 5; i++) {
        const x = gridX + i * cellSize + cellSize / 2
        const y = gridY + gridHeight + 15
        ctx.fillText((i + 1).toString(), x, y)
      }

      // Y-axis values
      for (let i = 0; i < 5; i++) {
        const x = gridX - 15
        const y = gridY + (4 - i) * cellSize + cellSize / 2
        ctx.fillText((i + 1).toString(), x, y)
      }

      // Draw title
      ctx.fillStyle = "#334155"
      ctx.font = "bold 14px sans-serif"
      ctx.textAlign = "center"
      ctx.textBaseline = "top"
      ctx.fillText("漏洞风险矩阵", canvas.width / 2, 10)

      // Draw vulnerabilities as circles
      vulnerabilities.forEach((vuln) => {
        const x = gridX + (vuln.likelihood - 1) * cellSize + cellSize / 2
        const y = gridY + (5 - vuln.impact) * cellSize + cellSize / 2
        const radius = Math.min(10, Math.sqrt(vuln.count) * 3)

        // Draw circle
        ctx.beginPath()
        ctx.arc(x, y, radius, 0, Math.PI * 2)
        ctx.fillStyle = "rgba(79, 70, 229, 0.7)"
        ctx.fill()
        ctx.strokeStyle = "#4f46e5"
        ctx.lineWidth = 1
        ctx.stroke()

        // Draw count
        ctx.fillStyle = "#ffffff"
        ctx.font = "bold 10px sans-serif"
        ctx.textAlign = "center"
        ctx.textBaseline = "middle"
        ctx.fillText(vuln.count.toString(), x, y)
      })

      // Draw legend
      ctx.fillStyle = "#334155"
      ctx.font = "12px sans-serif"
      ctx.textAlign = "left"
      ctx.textBaseline = "middle"
      ctx.fillText("圆圈大小表示漏洞数量", gridX, gridY + gridHeight + 40)
    }

    drawRiskMatrix()
    window.addEventListener("resize", drawRiskMatrix)

    return () => {
      window.removeEventListener("resize", setCanvasDimensions)
      window.removeEventListener("resize", drawRiskMatrix)
    }
  }, [])

  return (
    <div className="relative h-[300px] w-full">
      <canvas ref={canvasRef} className="block h-full w-full" />
    </div>
  )
}
