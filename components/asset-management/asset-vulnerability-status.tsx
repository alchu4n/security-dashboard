"use client"

import { useEffect, useRef } from "react"

export function AssetVulnerabilityStatus() {
  const canvasRef = useRef<HTMLCanvasElement>(null)

  useEffect(() => {
    const canvas = canvasRef.current
    if (!canvas) return

    const ctx = canvas.getContext("2d")
    if (!ctx) return

    // Set canvas dimensions
    const setCanvasDimensions = () => {
      const parent = canvas.parentElement
      if (!parent) return

      canvas.width = parent.clientWidth
      canvas.height = 300
    }

    setCanvasDimensions()
    window.addEventListener("resize", setCanvasDimensions)

    // Sample data for the chart
    const data = [
      { label: "无漏洞", value: 45, color: "#10b981" },
      { label: "已修复", value: 30, color: "#3b82f6" },
      { label: "修复中", value: 15, color: "#f59e0b" },
      { label: "未修复", value: 10, color: "#ef4444" },
    ]

    // Draw stacked bar chart
    const drawStackedBarChart = () => {
      const padding = { top: 30, right: 20, bottom: 60, left: 40 }
      const chartWidth = canvas.width - padding.left - padding.right
      const chartHeight = canvas.height - padding.top - padding.bottom

      // Clear canvas
      ctx.clearRect(0, 0, canvas.width, canvas.height)

      // Draw background
      ctx.fillStyle = "#ffffff"
      ctx.fillRect(0, 0, canvas.width, canvas.height)

      // Calculate total value
      const total = data.reduce((sum, item) => sum + item.value, 0)

      // Draw title
      ctx.fillStyle = "#334155"
      ctx.font = "bold 14px sans-serif"
      ctx.textAlign = "center"
      ctx.textBaseline = "top"
      ctx.fillText("资产漏洞状态分布", canvas.width / 2, 10)

      // Draw stacked bar
      const barWidth = chartWidth * 0.6
      const barX = padding.left + (chartWidth - barWidth) / 2
      let currentY = padding.top

      data.forEach((item) => {
        const barHeight = (item.value / total) * chartHeight

        // Draw bar segment
        ctx.fillStyle = item.color
        ctx.fillRect(barX, currentY, barWidth, barHeight)

        // Draw segment border
        ctx.strokeStyle = "#ffffff"
        ctx.lineWidth = 2
        ctx.strokeRect(barX, currentY, barWidth, barHeight)

        // Draw percentage label if segment is large enough
        const percentage = Math.round((item.value / total) * 100)
        if (percentage > 5) {
          ctx.fillStyle = "#ffffff"
          ctx.font = "bold 14px sans-serif"
          ctx.textAlign = "center"
          ctx.textBaseline = "middle"
          ctx.fillText(`${percentage}%`, barX + barWidth / 2, currentY + barHeight / 2)
        }

        currentY += barHeight
      })

      // Draw legend
      const legendX = padding.left
      const legendY = padding.top + chartHeight + 20
      const legendItemWidth = chartWidth / data.length

      data.forEach((item, index) => {
        const x = legendX + index * legendItemWidth

        // Draw color box
        ctx.fillStyle = item.color
        ctx.fillRect(x, legendY, 12, 12)

        // Draw label
        ctx.fillStyle = "#334155"
        ctx.font = "12px sans-serif"
        ctx.textAlign = "left"
        ctx.textBaseline = "middle"
        ctx.fillText(item.label, x + 16, legendY + 6)
      })
    }

    drawStackedBarChart()
    window.addEventListener("resize", drawStackedBarChart)

    return () => {
      window.removeEventListener("resize", setCanvasDimensions)
      window.removeEventListener("resize", drawStackedBarChart)
    }
  }, [])

  return (
    <div className="relative h-[300px] w-full">
      <canvas ref={canvasRef} className="block h-full w-full" />
    </div>
  )
}
